# coding: utf-8

"""
    Project Peak API

    API for managing posts and categories on a website

    The version of the OpenAPI document: 1.1.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json




from datetime import datetime
from pydantic import BaseModel, ConfigDict, Field, StrictStr, field_validator
from typing import Any, ClassVar, Dict, List, Optional
from openapi_server.models.category import Category
from openapi_server.models.post_images_inner import PostImagesInner
try:
    from typing import Self
except ImportError:
    from typing_extensions import Self

class PostUpdate(BaseModel):
    """
    PostUpdate
    """ # noqa: E501
    id: Optional[StrictStr] = Field(default=None, description="Unique identifier for the post")
    title: StrictStr = Field(description="Title of the post")
    content: StrictStr = Field(description="Content of the post in Markdown format")
    author: StrictStr = Field(description="Author of the post")
    created_at: Optional[datetime] = Field(default=None, description="Timestamp when the post was created", alias="createdAt")
    updated_at: Optional[datetime] = Field(default=None, description="Timestamp when the post was last updated", alias="updatedAt")
    images: Optional[List[PostImagesInner]] = Field(default=None, description="List of images associated with the post")
    categories: Optional[List[Category]] = Field(default=None, description="List of categories associated with the post")
    visibility: StrictStr = Field(description="Visibility state of the post: draft, review, or public")
    __properties: ClassVar[List[str]] = ["id", "title", "content", "author", "createdAt", "updatedAt", "images", "categories", "visibility"]

    @field_validator('visibility')
    def visibility_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('draft', 'review', 'public'):
            raise ValueError("must be one of enum values ('draft', 'review', 'public')")
        return value

    model_config = {
        "populate_by_name": True,
        "validate_assignment": True,
        "protected_namespaces": (),
    }


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of PostUpdate from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        _dict = self.model_dump(
            by_alias=True,
            exclude={
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in images (list)
        _items = []
        if self.images:
            for _item in self.images:
                if _item:
                    _items.append(_item.to_dict())
            _dict['images'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in categories (list)
        _items = []
        if self.categories:
            for _item in self.categories:
                if _item:
                    _items.append(_item.to_dict())
            _dict['categories'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Dict) -> Self:
        """Create an instance of PostUpdate from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "title": obj.get("title"),
            "content": obj.get("content"),
            "author": obj.get("author"),
            "createdAt": obj.get("createdAt"),
            "updatedAt": obj.get("updatedAt"),
            "images": [PostImagesInner.from_dict(_item) for _item in obj.get("images")] if obj.get("images") is not None else None,
            "categories": [Category.from_dict(_item) for _item in obj.get("categories")] if obj.get("categories") is not None else None,
            "visibility": obj.get("visibility") if obj.get("visibility") is not None else 'draft'
        })
        return _obj


